#!/bin/bash

#
# threatinfo
#
# Prerequisites: gawk, jq
#
# Usage: ./threatinfo <IP ADDRESS>
#
# Returns a report about <IP ADDRESS> useful to SOC staff and threat researchers
# using publicly available data.
#
# Version: 0.1a
#
# Todo: Lots of things.
#


#
# You'll need to provide API keys for the following services:
#
# ipdata.co      - Provides useful intel about known scanners
# ipinfo.io      - Excellent location data
# abuseipdb.com  - Community-based threat intelligence data
#
# All of these services provide a free tier that is sufficient for this tool.
# Signing up is painless and only takes a couple of minutes.
#
# This tool also pulls data from Greynoise using the community API.
#
# Future versions might add functionality for users with commercial accounts.
#
# WHOIS data is also collected using RDAP if KEEP_DATA is set, but is not currently
# used in any part of the report. Future work will include trying to extract the abuse
# email address (WHOIS data is notoriously unstandardised).
#

IPDATA_KEY=""
IPINFO_KEY=""
ABUSEIPDB_KEY=""

#
# Shodan is optional, since we don't actively report on any data from it right now.
#
# If a Shodan key is provided (highly recommended) and KEEP_DATA is set 
# you'll get a shodan.json file in KEEP_DATA_LOCATION 
# which might be useful for further investigation
#

SHODAN_KEY=""

#
# Do we want to store the data for manual analysis later?
#

KEEP_DATA=1

#
# Where should we put stored data?
#
# LFMF: Using ${HOME} rather than ~ actually works ;)
#

KEEP_DATA_LOCATION="${HOME}/.threatinfo"

#
# Useful functions
#

function underline(){

    # Prints a single line of text and underlines it with = signs

    i=0
    LENGTH=$( echo -n $1 |wc -c )

    echo $1

    while [ $i -lt ${LENGTH} ]; do

        echo -n "="
        ((i=i+1))
    done

    echo
}

function get_Ipinfo_Field(){

    # Extracts a field of data from an IPInfo.io JSON response

    echo "${IPINFO_DATA}" |jq ".${1}" |sed 's/null/Unknown/; s/^"//; s/"$//'
}

function get_Ipdata_Field(){

    # Extracts a field of data from an IPData.co JSON response

    echo "$IPDATA_DATA" |jq ".${1}" |sed 's/false/No/; s/true/Yes/; s/null/unknown/; s/^"//; s/"$//'
}

function get_IPdata_Status(){

    # Extracts a single status report field from an IPData.co JSON response

    echo "$IPDATA_DATA" |jq ".threat|.${1}" |sed 's/false/No/; s/true/Yes/; s/null/unknown/'
}

function get_Greynoise_Status(){

    # Extracts a single status report field from a Greynoise.io JSON response

    echo "$GREYNOISE_DATA" |jq ".${1}" |sed 's/false/No/; s/true/Yes/; s/^$/unknown/; s/^"//; s/"$//' 
}

function get_AbuseIPDB_Field(){

    # Extracts a single field from an AbuseIPDB.com JSON response

    echo "$ABUSEIPDB_DATA" |jq ".data|.$1" |sed 's/^"//; s/"$//'
}

function fetch_data(){

    # The main routine that pulls data from the various data sources

    if [ ! -d ${KEEP_DATA_LOCATION}/${1} ]; then
        mkdir -p ${KEEP_DATA_LOCATION}/${1}
    fi

    echo -n "Fetching data."

    #
    # Fetch data from IPInfo.io. This give really good location data.
    #

    IPINFO_DATA=$( curl -s "https://ipinfo.io/${1}/?token=${IPINFO_KEY}" |jq '.' )
   
    echo -n "."

    #
    # Fetch data from IPData.co. This provides some really useful assessments on internet scanners
    #

    IPDATA_DATA=$( curl -s "https://api.ipdata.co/${1}?api-key=${IPDATA_KEY}" |jq '.' )

    echo -n "."

    #
    # Fetch data from Shodan.io.
    #
    # We only do this if there's a SHODAN_KEY, and KEEP_DATA is set, since we currently don't
    # use any Shodan data in the report.
    #

    if [ -n "${SHODAN_KEY}" ]; then

        SHODAN_DATA=$( curl -s "https://api.shodan.io/shodan/host/${1}?key=${SHODAN_KEY}" |jq '.')

        echo -n "."
    fi

    #
    # Fetch data from Greynoise.io. We're just using the community API here.
    #
    # This gives good analysis from their honeypots.
    #
    
    GREYNOISE_DATA=$( curl -s  https://api.greynoise.io/v3/community/${1} |jq '.' )

    echo -n "."

    #
    # Fetch data from AbuseIPDB.com. This gives useful community-driven threat intelligence.
    #

    ABUSEIPDB_DATA=$( curl -s -H "Key: ${ABUSEIPDB_KEY}" -H "Accept: application/json" "https://api.abuseipdb.com/api/v2/check?ipAddress=${1}&maxAgeInDays=90" |jq '.' )

    echo -n "."
    
    #
    # Fetch WHOIS data in JSON format using RDAP
    #

    WHOIS_DATA=$( curl -s -L -H "Accept: application/json" "https://rdap.apnic.net/ip/${1}/32" |jq '.' )

    echo "."
    echo

    if [ $KEEP_DATA -eq 1 ]; then

        echo "${IPINFO_DATA}" >${KEEP_DATA_LOCATION}/${1}/ipinfo.json
	echo "${IPDATA_DATA}" >${KEEP_DATA_LOCATION}/${1}/ipdata.json
        echo "${GREYNOISE_DATA}" >${KEEP_DATA_LOCATION}/${1}/greynoise.json
	echo "${ABUSEIPDB_DATA}" >${KEEP_DATA_LOCATION}/${1}/abuseipdb.json
	echo "${WHOIS_DATA}" >${KEEP_DATA_LOCATION}/${1}/whois.json

        # Store the Shodan data if we collected it
	if [ -n "${SHODAN_KEY}" ]; then

	    echo "${SHODAN_DATA}" >${KEEP_DATA_LOCATION}/${1}/shodan.json
	fi
    fi
}

function parse_fields() {

    PTR=$( get_Ipinfo_Field hostname )
    countryName=$( get_Ipdata_Field country_name )
    cityName=$( get_Ipinfo_Field city )
    orgName=$( get_Ipinfo_Field org )
    ISP=$( get_AbuseIPDB_Field isp )
    
    torStatus=$( get_IPdata_Status is_tor )
    proxyStatus=$( get_IPdata_Status is_proxy )
    attackerStatus=$( get_IPdata_Status is_known_attacker )
    threatStatus=$( get_IPdata_Status is_threat )
    botStatus=$( get_IPdata_Status is_known_abuser )
    
    noiseStatus=$( get_Greynoise_Status noise )
    riotStatus=$( get_Greynoise_Status riot )
    categoryStatus=$( get_Greynoise_Status classification )
    nameStatus=$( get_Greynoise_Status name )
    
    abuseReports=$( get_AbuseIPDB_Field totalReports )
    abuseReporters=$( get_AbuseIPDB_Field numDistinctUsers )
    abuseConfidence=$( get_AbuseIPDB_Field abuseConfidenceScore )
    abuseConnType=$( get_AbuseIPDB_Field usageType )
}
    
function report(){

    underline "$1"
    
    echo -e "
    Hostname:                 $PTR
    Country:                  $countryName
    City:                     $cityName
    Org:                      $orgName
    ISP:                      $ISP
    
    IPData assessment
    =================
    
    Tor node?                 $torStatus
    Proxy node?               $proxyStatus
    Known Attacker?           $attackerStatus
    Known threat?             $threatStatus
    Known spambot?            $botStatus
    
    GreyNoise assessment
    ====================
    
    Known scanner?            $noiseStatus
    Known good actor?         $riotStatus
    Category:                 $categoryStatus
    Name (if known):          $nameStatus
    
    AbuseIPDB assessment
    ====================
    
    Reports past 90d:         $abuseReports
    No. of reporters:         $abuseReporters
    Confidence of abuse:      ${abuseConfidence}%
    Connection type:          $abuseConnType"

}

main() {

    fetch_data "${1}"
    parse_fields
    report "${1}"
}

main "${1}"
