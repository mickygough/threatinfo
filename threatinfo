#!/bin/bash

#
# threatinfo
#
# Usage: threatinfo <IPv4 ADDRESS>
#
# Returns a report about <IP ADDRESS> useful to SOC staff and threat researchers
# using publicly available data.
#
# Version: 0.1a
#
# Todo: Lots of things.
#

#
# Do we want to store the data for manual analysis later?
#

KEEP_DATA=1

#
# Where should we put stored data?
#
# LFMF: Using ${HOME} rather than ~ actually works ;)
#

KEEP_DATA_LOCATION="${HOME}/.threatinfo"

#
# Where should we keep our keys?
#

KEY_STORE="${HOME}/.threatinfo.conf"

#
# How long before country code mappings should be considered stale (in days)
#

COUNTRY_CODE_REFRESH=14

#
# How long before we consider IP data stale (in days)
#

IP_DATA_REFRESH=3

#
# Useful functions
#

function underline(){

    # Prints a single line of text and underlines it with = signs

    i=0
    LENGTH=$( echo -n $1 |wc -c )

    echo $1

    while [ $i -lt ${LENGTH} ]; do

        echo -n "="
        ((i=i+1))
    done

    echo
}

function check_arg(){

    # Check that $1 is an IPv4 address
    if ! egrep -q '^(([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))\.){3}([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))$' <<<"${1}"; then

        echo "Usage: threatinfo <IPv4 ADDRESS>"
        exit 1
    fi

    return 0
}

function get_keys(){

    # Check that the keystore exists
    if [ ! -f "${KEY_STORE}" ]; then

        cat <<_EOF >"${KEY_STORE}"
#
# You'll need to provide API keys for the following services:
#
# ipdata.co      - Provides useful intel about known scanners
# ipinfo.io      - Excellent location data
# abuseipdb.com  - Community-based threat intelligence data
#
# All of these services provide a free tier that is sufficient for this tool.
# Signing up is painless and only takes a couple of minutes.
#
# This tool also pulls data from Greynoise using the community API.
#
# Future versions might add functionality for users with commercial accounts.
#
# WHOIS data is also collected using RDAP if KEEP_DATA is set, but is not currently
# used in any part of the report. Future work will include trying to extract the abuse
# email address (WHOIS data is notoriously unstandardised).
#

IPDATA_KEY=""
IPINFO_KEY=""
ABUSEIPDB_KEY=""

#
# Shodan is optional, since we don't actively report on any data from it right now.
#
# If a Shodan key is provided (highly recommended) and KEEP_DATA is set 
# you'll get a shodan.json file in KEEP_DATA_LOCATION 
# which might be useful for further investigation
#

SHODAN_KEY=""
_EOF

        chmod 600 "${KEY_STORE}"

        echo "Key store not found. Please populate ${KEY_STORE} with the relevant API keys."
        exit
    fi

    # Make sure permissions on the key store file are -rw------- for security
    if ! ls -l "${KEY_STORE}" |egrep -q '^-rw-------' ; then

        echo "Warning: Fixing permissions on "${KEY_STORE}". Permissions were $( ls -l "${KEY_STORE}" |cut -f 1 -d " " ), changing them to -rw-------"
        chmod 600 "${KEY_STORE}"
    fi

    source "${KEY_STORE}"

    if [ -z "${IPDATA_KEY}" -o -z "${IPINFO_KEY}" -o -z "${ABUSEIPDB_KEY}" ]; then

        echo "Key store at ${KEY_STORE} is missing mandatory keys. Please fix before continuing."
    fi
}

function get_Ipinfo_Field(){

    # Extracts a field of data from an IPInfo.io JSON response

    echo "${IPINFO_DATA}" |jq ".${1}" |sed 's/null/Unknown/; s/^"//; s/"$//'
}

function get_Ipdata_Field(){

    # Extracts a field of data from an IPData.co JSON response

    echo "$IPDATA_DATA" |jq ".${1}" |sed 's/false/No/; s/true/Yes/; s/null/unknown/; s/^"//; s/"$//'
}

function get_Ipdata_Status(){

    # Extracts a single status report field from an IPData.co JSON response

    echo "$IPDATA_DATA" |jq ".threat|.${1}" |sed 's/false/No/; s/true/Yes/; s/null/unknown/'
}

function get_Ipdata_Timeinfo(){

    # Extracts a single field from the timezone data in an IPData.co JSON response
    echo "$IPDATA_DATA" |jq ".time_zone|.${1}" |sed 's/false/No/; s/true/Yes/; s/null/unknown/; s/^"//; s/"$//'
}

function get_Greynoise_Status(){

    # Extracts a single status report field from a Greynoise.io JSON response

    echo "$GREYNOISE_DATA" |jq ".${1}" |sed 's/false/No/; s/true/Yes/; s/^$/unknown/; s/^"//; s/"$//' 
}

function get_AbuseIPDB_Field(){

    # Extracts a single field from an AbuseIPDB.com JSON response

    echo "$ABUSEIPDB_DATA" |jq ".data|.$1" |sed 's/^"//; s/"$//'
}

function resolve_Country_Name(){

    # Echoes a country name given a two letter country code
    egrep "^${1}" ${KEEP_DATA_LOCATION}/countrycodes.txt |cut -f 2- -d " "
}

function fetch_data(){

    if [ $( find ${KEEP_DATA_LOCATION}/countrycodes.txt -mtime -${COUNTRY_CODE_REFRESH} 2>/dev/null |wc -l ) -lt 1 ]; then

        echo "Freshening country code data"

        curl -L -s https://datahub.io/core/country-list/r/data.json |jq '.[] | "\(.Code) \(.Name)"' |sed 's/^"//; s/\"$//; ; s/Russian\ Federation/Russia/' >${KEEP_DATA_LOCATION}/countrycodes.txt 
        echo
    fi

    # The main routine that pulls data from the various data sources

    if [ ! -d ${KEEP_DATA_LOCATION}/${1} ]; then
        mkdir -p ${KEEP_DATA_LOCATION}/${1}
    fi

    echo -n "Fetching data."

    #
    # Fetch data from IPInfo.io. This gives really good location data.
    #

    if [ $( find ${KEEP_DATA_LOCATION}/${1}/ipinfo.json -mtime -${IP_DATA_REFRESH} 2>/dev/null |wc -l ) -lt 1 ]; then

        IPINFO_DATA=$( curl -s "https://ipinfo.io/${1}/?token=${IPINFO_KEY}" |jq '.' )

        if [ $KEEP_DATA -eq 1 ]; then

            echo "${IPINFO_DATA}" >${KEEP_DATA_LOCATION}/${1}/ipinfo.json
        fi
    else

        IPINFO_DATA="$( cat ${KEEP_DATA_LOCATION}/${1}/ipinfo.json )"
    fi
   
    echo -n "."

    #
    # We're going to check if this is a bogon right now to avoid retrieving unnecessary data
    bogon=$( get_Ipinfo_Field bogon )

    if [ "${bogon}" == "true" ]; then

        echo; echo
        return
    fi

    #
    # Fetch data from IPData.co. This provides some really useful assessments on internet scanners
    #

    if [ $( find ${KEEP_DATA_LOCATION}/${1}/ipdata.json -mtime -${IP_DATA_REFRESH} 2>/dev/null |wc -l ) -lt 1 ]; then

        IPDATA_DATA=$( curl -s "https://api.ipdata.co/${1}?api-key=${IPDATA_KEY}" |jq '.' )

        if [ $KEEP_DATA -eq 1 ]; then

            echo "${IPDATA_DATA}" >${KEEP_DATA_LOCATION}/${1}/ipdata.json
        fi
    else

        IPDATA_DATA="$( cat ${KEEP_DATA_LOCATION}/${1}/ipdata.json )"
    fi

    echo -n "."

    #
    # Fetch data from Shodan.io.
    #
    # We only do this if there's a SHODAN_KEY, and KEEP_DATA is set, since we currently don't
    # use any Shodan data in the report.
    #

    if [ -n "${SHODAN_KEY}" ]; then

        if [ $( find ${KEEP_DATA_LOCATION}/${1}/shodan.json -mtime -${IP_DATA_REFRESH} 2>/dev/null |wc -l ) -lt 1 ]; then

            SHODAN_DATA=$( curl -s "https://api.shodan.io/shodan/host/${1}?key=${SHODAN_KEY}" |jq '.')

            if [ $KEEP_DATA -eq 1 ]; then

                echo "${SHODAN_DATA}" >${KEEP_DATA_LOCATION}/${1}/shodan.json
            fi
        else

            SHODAN_DATA="$( cat ${KEEP_DATA_LOCATION}/${1}/shodan.json )"
        fi

        echo -n "."
    fi

    #
    # Fetch data from Greynoise.io. We're just using the community API here.
    #
    # This gives good analysis from their honeypots.
    #

    if [ $( find ${KEEP_DATA_LOCATION}/${1}/greynoise.json -mtime -${IP_DATA_REFRESH} 2>/dev/null |wc -l ) -lt 1 ]; then

        GREYNOISE_DATA=$( curl -s  https://api.greynoise.io/v3/community/${1} |jq '.' )

        if [ $KEEP_DATA -eq 1 ]; then

            echo "${GREYNOISE_DATA}" >${KEEP_DATA_LOCATION}/${1}/greynoise.json
        fi
    else

        GREYNOISE_DATA="$( cat ${KEEP_DATA_LOCATION}/${1}/greynoise.json )"
    fi

    echo -n "."

    #
    # Fetch data from AbuseIPDB.com. This gives useful community-driven threat intelligence.
    #
    # Since this gets updated in realtime we're not going to use cached values for this data set.
    #

    ABUSEIPDB_DATA=$( curl -s -H "Key: ${ABUSEIPDB_KEY}" -H "Accept: application/json" "https://api.abuseipdb.com/api/v2/check?ipAddress=${1}&maxAgeInDays=90" |jq '.' )

    echo -n "."
    
    #
    # Fetch WHOIS data in JSON format using RDAP
    #

    if [ $( find ${KEEP_DATA_LOCATION}/${1}/whois.json -mtime -${IP_DATA_REFRESH} 2>/dev/null |wc -l ) -lt 1 ]; then

        WHOIS_DATA=$( curl -s -L -H "Accept: application/json" "https://rdap.apnic.net/ip/${1}/32" |jq '.' )

        if [ $KEEP_DATA -eq 1 ]; then

            echo "${WHOIS_DATA}" >${KEEP_DATA_LOCATION}/${1}/whois.json
        fi
    else

        WHOIS_DATA="$( cat ${KEEP_DATA_LOCATION}/${1}/whois.json )"
    fi

    echo "."
    echo

}

function parse_fields() {

    if [ "${bogon}" == "true" ]; then

        return
    fi

    PTR=$( get_Ipinfo_Field hostname )
    countryIpinfo=$( get_Ipinfo_Field country )
    countryNameIpinfo=$( resolve_Country_Name ${countryIpinfo} )
    regionNameIpinfo=$( get_Ipinfo_Field region )
    cityNameIpinfo=$( get_Ipinfo_Field city )
    countryNameIpdata=$( get_Ipdata_Field country_name )
    regionNameIpdata=$( get_Ipdata_Field region )
    cityNameIpdata=$( get_Ipdata_Field city )
    orgName=$( get_Ipinfo_Field org )
    ISP=$( get_AbuseIPDB_Field isp )

    timeZoneIpinfo=$( get_Ipinfo_Field timezone )
    UTCOffsetIpinfo=$( TZ="$timeZoneIpinfo" date +%z )
    currentTimeIpinfo=$( TZ="$timeZoneIpinfo" date +%c )

    timeZoneIpdata=$( get_Ipdata_Timeinfo name )
    UTCOffsetIpdata=$( get_Ipdata_Timeinfo offset )
    currentTimeIpdata=$( TZ="$timeZoneIpdata" date +%c )

    torStatus=$( get_Ipdata_Status is_tor )
    proxyStatus=$( get_Ipdata_Status is_proxy )
    attackerStatus=$( get_Ipdata_Status is_known_attacker )
    threatStatus=$( get_Ipdata_Status is_threat )
    botStatus=$( get_Ipdata_Status is_known_abuser )
    
    noiseStatus=$( get_Greynoise_Status noise )
    riotStatus=$( get_Greynoise_Status riot )
    categoryStatus=$( get_Greynoise_Status classification )
    nameStatus=$( get_Greynoise_Status name )
    linkStatus=$( get_Greynoise_Status link )
    lastSeenStatus=$( get_Greynoise_Status last_seen )
    
    abuseReports=$( get_AbuseIPDB_Field totalReports )
    abuseReporters=$( get_AbuseIPDB_Field numDistinctUsers )
    abuseConfidence=$( get_AbuseIPDB_Field abuseConfidenceScore )
    abuseConnType=$( get_AbuseIPDB_Field usageType )
}
    
function report(){

    underline "$1"

    if [ "${bogon}" == "true" ]; then

        echo -e "\n${1} is a non-routable address. No data available.\n\n"
        return
    fi
    
    echo -e "
    Hostname:                 $PTR
    Org:                      $orgName
    ISP:                      $ISP
    Connection type:          $abuseConnType

    Geographic Info
    ==============="

    if [ "${countryNameIpinfo}" == "${countryNameIpdata}" ]; then

        echo
        echo "    Country:                  ${countryNameIpinfo}"

        if [ "${regionNameIpinfo}" == "${regionNameIpdata}" -o "${regionNameIpdata}" == "unknown" ]; then

            echo "    Region:                   ${regionNameIpinfo}"

            if [ "${cityNameIpinfo}" == "${cityNameIpdata}" -o "$cityNameIpdata" == "unknown" ]; then

                echo "    City:                     ${cityNameIpinfo}"
            else

                echo "
    IPInfo.io:

        City:                 ${cityNameIpinfo}

    IPData.co:

        City:                 ${cityNameIpdata}"

            fi
        else

            echo "
    IPInfo.io:

        Region:               ${regionNameIpinfo}
        City:                 ${cityNameIpinfo}

    IPData.co:

        Region:               ${regionNameIpdata}
        City:                 ${cityNameIpdata}"

        fi

    else

        echo "
    IPInfo.io:

        Country:              ${countryNameIpinfo}
        Region:               ${regionNameIpinfo}
        City:                 ${cityNameIpinfo}

    IPData.co:

        Country:              ${countryNameIpdata}
        Region:               ${regionNameIpdata}
        City:                 ${cityNameIpdata}"
    fi

    echo "
    Timezone Info
    ============="

    if [ "${timeZoneIpinfo}" == "${timeZoneIpdata}" -a "${UTCOffsetIpinfo}" == "${UTCOffsetIpdata}" -a "${currentTimeIpinfo}" == "${currentTimeIpdata}" ]; then

        echo "
    Timezone:                 ${timeZoneIpinfo}
    UTC offset:               ${UTCOffsetIpinfo}
    Current time:             ${currentTimeIpinfo}"

    else

        echo "
    IPInfo.io:
   
        Timezone:                 ${timeZoneIpinfo}
        UTC offset:               ${UTCOffsetIpinfo}
        Current time:             ${currentTimeIpinfo}

    IPData.co:

        Timezone:                 ${timeZoneIpdata}
        UTC offset:               ${UTCOffsetIpdata}
        Current time:             ${currentTimeIpdata}"

    fi

    echo "
    IPData assessment
    =================
    
    Tor node?                 $torStatus
    Proxy node?               $proxyStatus
    Known attacker?           $attackerStatus
    Known threat?             $threatStatus
    Known spambot?            $botStatus
    
    GreyNoise assessment
    ====================
    
    Known scanner?            $noiseStatus
    Known good actor?         $riotStatus"

    if [ "$noiseStatus" == "Yes" -o "$riotStatus" == "Yes" ]; then

        echo "    Category:                 $categoryStatus
    Name (if known):          $nameStatus
    Last observed:            $lastSeenStatus
    Link:                     $linkStatus"

    fi

    echo "    
    AbuseIPDB assessment
    ====================
    
    Reports past 90d:         $abuseReports
    No. of reporters:         $abuseReporters
    Confidence of abuse:      ${abuseConfidence}%
    Link:                     https://abuseipdb.com/check/${1}
"

}

main() {

    # Currently this is only tested for IPv4 IPs.
    # Check that there's a $1, and that it's an IPv4 IP
    check_arg "${1}"
    get_keys
    fetch_data "${1}"
    parse_fields
    report "${1}"
}

main "${1}"
